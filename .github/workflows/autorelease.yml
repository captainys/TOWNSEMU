name: Auto Release with Tag

on:
  push:
    tags:
      - 'v*' # Run if tagged as v*.

jobs:
  build-windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: mkdir
      run: mkdir ci_windows
    - name: build
      run: |
          cmake ../src
          cmake --build . --config Release
      working-directory: ./ci_windows
    - name: mkdir_gui
      run: mkdir build
      working-directory: ./gui
    - name: checkout_gui
      run: git clone https://github.com/captainys/public.git
      working-directory: ./gui/src
    - name: build_gui
      run: |
          cmake ../src
          cmake --build . --config Release --target Tsugaru_GUI
      working-directory: ./gui/build
    - name: make_zip
      run: |
          cmake -E copy ./main_cui/Release/Tsugaru_CUI.exe .
          cmake -E copy ../gui/build/main_gui/Release/Tsugaru_GUI.exe .
          cmake -E copy ../readme.md .
          cmake -E copy ../command.md .
          cmake -E copy ../util/TsugaruUtil.D77 .
          cmake -E tar cvf windows_binary_latest.zip --format=zip Tsugaru_CUI.exe Tsugaru_GUI.exe TsugaruUtil.D77 readme.md command.md
      working-directory: ./ci_windows
    - name: upload_to_artifact
      uses: actions/upload-artifact@v4
      with:
          name: Windows-Binary
          path: ci_windows/windows_binary_latest.zip



  build-linux:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: mkdir
      run: mkdir ci_ubuntu
    - name: install-OpenGL
      run: |
          sudo apt-get update
          sudo apt-get install libglu1-mesa-dev mesa-common-dev
    - name: install-ALSA
      run: sudo apt-get install libasound2 libasound2-dev
    - name: cmake
      run: cmake ../src -DCMAKE_BUILD_TYPE=Release
      working-directory: ./ci_ubuntu
    - name: build
      run: cmake --build . --config Release --target Tsugaru_CUI
      working-directory: ./ci_ubuntu

    - name: mkdir_gui
      run: mkdir build
      working-directory: ./gui
    - name: checkout_gui
      run: git clone https://github.com/captainys/public.git
      working-directory: ./gui/src
    - name: build_gui
      run: |
          cmake ../src -DCMAKE_BUILD_TYPE=Release
          cmake --build main_gui --config Release --target Tsugaru_GUI
      working-directory: ./gui/build

    - name: make_zip
      run: |
          cmake -E copy ./main_cui/Tsugaru_CUI .
          cmake -E copy ../gui/build/main_gui/Tsugaru_GUI .
          cmake -E copy ../readme.md .
          cmake -E copy ../command.md .
          cmake -E copy ../util/TsugaruUtil.D77 .
          cmake -E tar cvf ubuntu_binary_latest.zip --format=zip Tsugaru_CUI Tsugaru_GUI TsugaruUtil.D77 readme.md command.md
      working-directory: ./ci_ubuntu
    - name: upload_to_artifact
      uses: actions/upload-artifact@v4
      with:
          name: Ubuntu-Binary
          path: ci_ubuntu/ubuntu_binary_latest.zip



  build-macos:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4
    - name: mkdir
      run: mkdir ci_macos
    - name: cmake
      run: cmake ../src -DCMAKE_BUILD_TYPE=Release
      working-directory: ./ci_macos
    - name: build
      run: cmake --build .
      working-directory: ./ci_macos

    - name: mkdir_gui
      run: mkdir build
      working-directory: ./gui
    - name: checkout_gui
      run: git clone https://github.com/captainys/public.git
      working-directory: ./gui/src
    - name: build_gui
      run: |
          cmake ../src -DCMAKE_BUILD_TYPE=Release
          cmake --build main_gui --config Release --target Tsugaru_GUI
      working-directory: ./gui/build

    - name: make_zip
      run: |
          cmake -E copy_directory ../gui/build/main_gui/Tsugaru_GUI.app ./Tsugaru_GUI.app
          cmake -E copy main_cui/Tsugaru_CUI.app/Contents/MacOS/Tsugaru_CUI Tsugaru_GUI.app/Contents/MacOS/.
          cmake -E copy ../readme.md .
          cmake -E copy ../command.md .
          cmake -E copy ../util/TsugaruUtil.D77 .
          cmake -E tar cvf macos_binary_latest.zip --format=zip Tsugaru_GUI.app TsugaruUtil.D77 readme.md command.md
      working-directory: ./ci_macos
    - name: upload_to_artifact
      uses: actions/upload-artifact@v4
      with:
          name: Macos-Binary
          path: ci_macos/macos_binary_latest.zip


  after-build:
    needs: [build-windows, build-linux, build-macos]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: Windows-Binary

    - uses: actions/download-artifact@v4
      with:
        name: Ubuntu-Binary

    - uses: actions/download-artifact@v4
      with:
        name: Macos-Binary

    - name: Verify files
      run: ls -l

    # https://github.com/actions/upload-release-asset
    - name: Create Release
      id: create_release
      # uses: actions/create-release@v1   Is it deprecated and not maintained?
      #env:
      #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #with:
      #  tag_name: ${{ github.ref }}
      #  release_name: Auto Release ${{ github.ref }}
      #  draft: false
      #  prerelease: true
      # Apparently github.ref gives /refs/tags/v99999999
      # Hopefully github.ref_name givew v99999999 only.
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: ${{ github.ref_name }}
        prerelease: true
        title: Auto Release ${{ github.ref_name }}

    - name: Upload Windows Binary
      id: upload-windows-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows_binary_latest.zip
        asset_name: windows_binary_latest.zip
        asset_content_type: application/zip

    - name: Upload Ubuntu Binary
      id: upload-ubuntu-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ubuntu_binary_latest.zip
        asset_name: ubuntu_binary_latest.zip
        asset_content_type: application/zip

    - name: Upload macOS Binary
      id: upload-macOS-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos_binary_latest.zip
        asset_name: macos_binary_latest.zip
        asset_content_type: application/zip

